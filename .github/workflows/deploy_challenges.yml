name: Deploy Challenges to CTFd

on:
  push:
    branches: [ main ] #デバッグ用する際はコメントアウト
    paths: ["challenges/**"] 
  pull_request:
    branches: [ main ]
    types: [ closed ]
    paths: ["challenges/**"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ctfcli pexpect requests

      - name: Clean CTFcli state
        run: |
          # CTFcliの状態とキャッシュをクリア
          rm -rf ~/.ctfcli
          rm -rf .ctf

      - name: Create CTFcli config
        run: |
          # CTFdサーバー接続情報の設定
          mkdir -p ~/.ctfcli
          cat > ~/.ctfcli/config.ini << EOF
          [config]
          url = $CTFD_URL
          access_token = $CTFD_ACCESS_TOKEN
          EOF
        env:
          CTFD_URL: "${{ secrets.CTFD_URL }}"
          CTFD_ACCESS_TOKEN: "${{ secrets.CTFD_ACCESS_TOKEN }}"

      - name: Initialize CTFcli project
        run: |
          # 対話的入力に自動応答するPythonスクリプトを作成
          cat > init_project.py << 'EOF'
          import pexpect
          import sys
          import os
          import time
          
          def initialize_project():
              # 環境変数からURLとトークンを取得
              ctfd_url = os.environ.get('CTFD_URL', 'https://example.com')
              ctfd_token = os.environ.get('CTFD_ACCESS_TOKEN', 'token')
              
              child = pexpect.spawn('ctf init')
              # デバッグ出力を有効化
              child.logfile = sys.stdout.buffer
              
              # 具体的なプロンプト文字列と応答のマッピング
              prompts = {
                  "Outside of a ctfcli project, would you like to start a new project in this directory?": "y",
                  "Please enter CTFd instance URL:": ctfd_url,
                  "Please enter CTFd Admin Access Token:": ctfd_token,
                  "Please enter your name:": "CTF Admin",
                  "Please enter your email:": "admin@example.com",
                  "Select a CTF type:": "1",
                  "Do you want to continue with": "Y",  # 継続確認プロンプト
                  "Author identity unknown": "\n"  # Git警告を無視
              }
              
              success = True
              # 各プロンプトを処理
              while True:
                  try:
                      patterns = list(prompts.keys()) + [pexpect.EOF]
                      index = child.expect(patterns, timeout=30)
                      
                      # EOFの場合は終了
                      if index == len(prompts):
                          print("プロセスが終了しました")
                          break
                          
                      # そうでなければ応答を送信
                      prompt = patterns[index]
                      response = prompts[prompt]
                      child.sendline(response)
                      time.sleep(0.5)  # 応答を処理する時間を与える
                      
                  except pexpect.exceptions.EOF:
                      print("予期せぬEOFに達しました")
                      success = False
                      break
                  except pexpect.exceptions.TIMEOUT:
                      print("タイムアウト発生")
                      success = False
                      break
              
              # 子プロセスが終了するのを待つ
              child.close()
              print(f"プロセスの終了コード: {child.exitstatus}")
              
              # 成功したかどうかを返す（エラーが発生していなければ成功と見なす）
              return 0 if success else 1
          
          if __name__ == '__main__':
              sys.exit(initialize_project())
          EOF
          
          # スクリプトを実行
          python init_project.py || true  # エラーが発生しても続行
        env:
          CTFD_URL: ${{ secrets.CTFD_URL }}
          CTFD_ACCESS_TOKEN: ${{ secrets.CTFD_ACCESS_TOKEN }}

      - name: List all challenges
        run: |
          # CTFdサーバーから直接チャレンジ一覧を取得するスクリプト
          cat > list_challenges.py << 'EOF'
          import requests
          import os
          import sys
          import json
          from datetime import datetime
          
          def get_all_challenges():
              """CTFd APIを使用して全チャレンジを取得"""
              ctfd_url = os.environ.get('CTFD_URL')
              access_token = os.environ.get('CTFD_ACCESS_TOKEN')
              
              if not ctfd_url or not access_token:
                  print("エラー: 環境変数 CTFD_URL または CTFD_ACCESS_TOKEN が設定されていません")
                  return False
              
              # API URLの組み立て
              api_url = f"{ctfd_url}/api/v1/challenges"
              
              # ヘッダーの設定
              headers = {
                  "Authorization": f"Token {access_token}",
                  "Content-Type": "application/json"
              }
              
              try:
                  # チャレンジ一覧を取得
                  response = requests.get(api_url, headers=headers)
                  response.raise_for_status()  # エラー時に例外を発生
                  
                  # レスポンスをJSON形式でパース
                  data = response.json()
                  
                  if "success" in data and data["success"]:
                      challenges = data.get("data", [])
                      
                      # チャレンジ数を表示
                      print(f"\n=== CTFd サーバー上のチャレンジ一覧 (合計: {len(challenges)}件) ===\n")
                      
                      # テーブルヘッダー
                      print(f"{'ID':<5} {'カテゴリ':<15} {'名前':<30} {'ポイント':<8} {'解答数':<8} {'ステータス':<10}")
                      print("-" * 80)
                      
                      # チャレンジの情報を表示
                      for challenge in challenges:
                          category = challenge.get("category", "カテゴリなし")
                          name = challenge.get("name", "名前なし")
                          value = challenge.get("value", 0)
                          solves = challenge.get("solves", 0)
                          state = challenge.get("state", "未公開")
                          
                          print(f"{challenge.get('id', '?'):<5} {category[:15]:<15} {name[:30]:<30} {value:<8} {solves:<8} {state:<10}")
                      
                      return True
                  else:
                      print(f"エラー: APIからのレスポンスが不正です: {data}")
                      return False
                      
              except requests.exceptions.RequestException as e:
                  print(f"APIリクエスト中にエラーが発生しました: {e}")
                  return False
              except json.JSONDecodeError:
                  print("JSONのデコードに失敗しました")
                  return False
              except Exception as e:
                  print(f"予期せぬエラーが発生しました: {e}")
                  return False
          
          if __name__ == "__main__":
              success = get_all_challenges()
              sys.exit(0 if success else 1)
          EOF
          
          # スクリプトを実行
          python list_challenges.py || true  # エラーが発生しても続行
        env:
          CTFD_URL: "${{ secrets.CTFD_URL }}"
          CTFD_ACCESS_TOKEN: "${{ secrets.CTFD_ACCESS_TOKEN }}"

      - name: Get changed challenges
        id: changed-files
        uses: tj-actions/changed-files@v43
        with:
          files: |
            challenges/**/*.yml
            challenges/**/*.yaml

      - name: Test CTFd connection
        run: |
          cat > test_connection.py << 'EOF'
          import requests
          import os
          import sys
          
          def test_connection():
              """CTFdサーバーへの接続テスト"""
              ctfd_url = os.environ.get('CTFD_URL')
              access_token = os.environ.get('CTFD_ACCESS_TOKEN')
              
              # 環境変数の確認
              if not ctfd_url or not access_token:
                  print("エラー: CTFD_URLまたはCTFD_ACCESS_TOKENが設定されていません")
                  print(f"CTFD_URL: {'設定済み' if ctfd_url else '未設定'}")
                  print(f"CTFD_ACCESS_TOKEN: {'設定済み（値は非表示）' if access_token else '未設定'}")
                  return False
              
              # URLのフォーマット確認
              if not ctfd_url.startswith(('http://', 'https://')):
                  print(f"エラー: CTFd URLのフォーマットが不正です: {ctfd_url}")
                  return False
              
              # サーバー接続確認
              try:
                  # まずURLに直接アクセス
                  print(f"CTFdサーバー({ctfd_url})に接続テスト中...")
                  response = requests.get(ctfd_url, timeout=10)
                  print(f"ステータス: {response.status_code}")
                  
                  # APIエンドポイントにアクセス
                  api_url = f"{ctfd_url}/api/v1/users"
                  headers = {"Authorization": f"Token {access_token}"}
                  print(f"API接続テスト中: {api_url}")
                  api_response = requests.get(api_url, headers=headers, timeout=10)
                  print(f"API応答: {api_response.status_code}")
                  
                  if api_response.status_code == 200:
                      print("✅ CTFdサーバーに正常に接続しました")
                      return True
                  else:
                      print(f"❌ APIエンドポイントにアクセスできませんでした: {api_response.status_code}")
                      return False
                      
              except requests.exceptions.ConnectionError:
                  print("❌ サーバーへの接続に失敗しました。URLが正しいか確認してください")
                  return False
              except requests.exceptions.Timeout:
                  print("❌ サーバー接続がタイムアウトしました")
                  return False
              except Exception as e:
                  print(f"❌ 予期せぬエラーが発生しました: {e}")
                  return False
          
          if __name__ == "__main__":
              success = test_connection()
              sys.exit(0 if success else 1)
          EOF
          
          python test_connection.py
        env:
          CTFD_URL: ${{ secrets.CTFD_URL }}
          CTFD_ACCESS_TOKEN: ${{ secrets.CTFD_ACCESS_TOKEN }}

      - name: Deploy challenges
        run: |
          # 同様のパターン処理を使用するスクリプトを作成
          cat > deploy_challenges.py << 'EOF'
          import pexpect
          import sys
          import os
          import glob
          import time
          import subprocess
          import yaml
          import requests
          
          def run_ctf_command(command, prompts, expect_patterns=None):
              """共通のctfコマンド実行関数"""
              print(f"実行コマンド: {command}")
              child = pexpect.spawn(command)
              child.logfile = sys.stdout.buffer
              
              success = True
              output = ""
              
              # 特別なパターンが指定されていない場合はデフォルトのプロンプトのみ
              if expect_patterns is None:
                  expect_patterns = []
              
              all_patterns = list(prompts.keys()) + expect_patterns + [pexpect.EOF]
              
              # 各プロンプトを処理
              while True:
                  try:
                      index = child.expect(all_patterns, timeout=30)
                      
                      # 現在の出力をキャプチャ
                      output += child.before.decode('utf-8', errors='ignore')
                      
                      # EOFの場合は終了
                      if index == len(all_patterns) - 1:
                          break
                          
                      # プロンプトに応答
                      if index < len(prompts.keys()):
                          prompt = list(prompts.keys())[index]
                          response = prompts[prompt]
                          child.sendline(response)
                      else:
                          # 特別なパターンにマッチした場合は出力のみキャプチャ
                          output += child.match.group(0).decode('utf-8', errors='ignore')
                      
                      time.sleep(0.5)  # 応答を処理する時間を与える
                      
                  except pexpect.exceptions.EOF:
                      print("予期せぬEOFに達しました")
                      success = False
                      break
                  except pexpect.exceptions.TIMEOUT:
                      print("タイムアウト発生")
                      success = False
                      break
              
              # 子プロセスを正しく終了させる
              child.close()
              
              return success and child.exitstatus == 0, output
          
          def find_challenge_file(directory):
              """ディレクトリ内でchallenge.ymlまたはchallenge.yamlファイルを探す"""
              yml_path = os.path.join(directory, "challenge.yml")
              yaml_path = os.path.join(directory, "challenge.yaml")
              
              if os.path.exists(yml_path):
                  return yml_path
              elif os.path.exists(yaml_path):
                  return yaml_path
              else:
                  return None

          def deploy_challenge(directory):
              """チャレンジの追加または更新を行う"""
              print(f"\n== Deploying challenge in {directory} ==")
              
              try:
                  # ディレクトリが存在するか確認
                  if not os.path.isdir(directory):
                      print(f"ディレクトリが見つかりません: {directory}")
                      return False
                  
                  # チャレンジファイルを探す（.yml または .yaml）
                  challenge_file = find_challenge_file(directory)
                  if not challenge_file:
                      print(f"challenge.ymlまたはchallenge.yamlが見つかりません: {directory}")
                      return False
                  
                  # YAMLファイルからチャレンジデータを読み込む
                  with open(challenge_file, 'r') as file:
                      challenge_data = yaml.safe_load(file)
                  
                  # チャレンジ名の取得（エラーチェック付き）
                  if not challenge_data or "name" not in challenge_data:
                      print(f"YAMLファイルにチャレンジ名が定義されていません: {challenge_file}")
                      return False
                  
                  challenge_name = challenge_data.get('name', '')
                  if not challenge_name:
                      print(f"チャレンジ名が空です: {challenge_file}")
                      return False
                  
                  # 環境変数からURLとトークンを取得
                  ctfd_url = os.environ.get('CTFD_URL', 'https://example.com')
                  ctfd_token = os.environ.get('CTFD_ACCESS_TOKEN', 'token')
                  
                  # 共通のプロンプト応答マッピング
                  prompts = {
                      "Outside of a ctfcli project, would you like to start a new project in this directory?": "y",
                      "Please enter CTFd instance URL:": ctfd_url,
                      "Please enter CTFd Admin Access Token:": ctfd_token,
                      "Please enter your name:": "CTF Admin",
                      "Please enter your email:": "admin@example.com",
                      "Select a CTF type:": "1",
                      "Do you want to continue with": "Y",  # 継続確認プロンプト
                      "Author identity unknown": "\n"  # Git警告を無視
                  }
                  
                  # カレントディレクトリを保存
                  original_dir = os.getcwd()
                  root_dir = original_dir
                  
                  try:
                      # ルートプロジェクトディレクトリから相対パスを取得
                      rel_path = os.path.relpath(directory, root_dir)
                      
                      # チャレンジファイルとファイルの存在を確認
                      has_files = "files" in challenge_data and challenge_data["files"] and any(
                          os.path.exists(os.path.join(directory, file_path)) 
                          for file_path in challenge_data.get("files", [])
                      )
                      
                      # まず sync を試す（既存のチャレンジの場合に成功しやすい）
                      print(f"チャレンジの同期を試みています: {challenge_name}")
                      sync_command = f'ctf challenge sync {rel_path}'
                      sync_success, sync_output = run_ctf_command(sync_command, prompts)
                      
                      # 同期に失敗した場合は追加を試みる
                      if not sync_success or "Could not find existing challenge" in sync_output:
                          if has_files:
                              # ファイルがある場合はinstallで一括処理
                              print(f"新規チャレンジをインストール中（ファイル含む）: {challenge_name}")
                              install_command = f'ctf challenge install {rel_path}'
                              install_success, _ = run_ctf_command(install_command, prompts)
                              success = install_success
                          else:
                              # ファイルがない場合はaddで追加
                              print(f"新規チャレンジを追加中: {challenge_name}")
                              add_command = f'ctf challenge add {rel_path}'
                              add_success, _ = run_ctf_command(add_command, prompts)
                              success = add_success
                      else:
                          success = sync_success
                      
                      if success:
                          print(f"チャレンジ {challenge_name} のデプロイが完了しました")
                      else:
                          print(f"チャレンジ {challenge_name} のデプロイに失敗しました")
                          
                          # 失敗した場合のフォールバック処理
                          print("別の方法でデプロイを試みます...")
                          add_command = f'ctf challenge add {rel_path}'
                          add_success, _ = run_ctf_command(add_command, prompts)
                          
                          if add_success and has_files:
                              print("チャレンジは追加されましたが、ファイルを別途同期します...")
                              files_sync_command = f'ctf challenge sync {rel_path}'
                              files_success, _ = run_ctf_command(files_sync_command, prompts)
                              success = files_success
                          else:
                              success = add_success
                          
                          if success:
                              print(f"フォールバック処理でチャレンジ {challenge_name} のデプロイが完了しました")
                      
                      return success
                      
                  finally:
                      # 元のディレクトリに戻る（必要ならば）
                      if os.getcwd() != original_dir:
                          os.chdir(original_dir)
                      
              except Exception as e:
                  print(f"エラーが発生しました: {str(e)}")
                  import traceback
                  traceback.print_exc()  # スタックトレースを表示
                  return False

          def verify_challenge_exists(challenge_name, ctfd_url, access_token):
              """チャレンジが既に存在するか確認する"""
              try:
                  # APIリクエストでチャレンジ一覧を取得
                  api_url = f"{ctfd_url}/api/v1/challenges"
                  headers = {"Authorization": f"Token {access_token}"}
                  
                  response = requests.get(api_url, headers=headers)
                  if response.status_code != 200:
                      print(f"API呼び出しエラー: {response.status_code}")
                      return False
                      
                  data = response.json()
                  if data.get("success"):
                      challenges = data.get("data", [])
                      for challenge in challenges:
                          if challenge.get("name") == challenge_name:
                              return True
                  return False
              except Exception as e:
                  print(f"チャレンジ存在確認中にエラー: {e}")
                  return False

          def verify_challenge_deployed(challenge_name, ctfd_url, access_token):
              """CTFdサーバーにチャレンジが存在するかを確認"""
              print(f"チャレンジ {challenge_name} のデプロイ状態を確認中...")
              
              # API URLの組み立て
              api_url = f"{ctfd_url}/api/v1/challenges"
              
              # ヘッダーの設定
              headers = {
                  "Authorization": f"Token {access_token}",
                  "Content-Type": "application/json"
              }
              
              try:
                  # チャレンジ一覧を取得
                  response = requests.get(api_url, headers=headers)
                  response.raise_for_status()
                  
                  # レスポンスをJSONでパース
                  data = response.json()
                  
                  if data.get("success"):
                      challenges = data.get("data", [])
                      
                      # チャレンジが存在するか確認
                      for challenge in challenges:
                          if challenge.get("name") == challenge_name:
                              print(f"✅ チャレンジ {challenge_name} は正常にデプロイされています (ID: {challenge.get('id')})")
                              return True
                      
                      print(f"❌ チャレンジ {challenge_name} はサーバーに存在しません")
                      return False
                  else:
                      print(f"APIレスポンスエラー: {data}")
                      return False
              except Exception as e:
                  print(f"確認中にエラー: {e}")
                  return False
          
          # メイン処理
          def main():
              success = True
              changed_files = sys.argv[1] if len(sys.argv) > 1 else ""
              
              if changed_files:
                  print("変更されたチャレンジをデプロイ中...")
                  for file in changed_files.split():
                      if "challenge.yml" in file or "challenge.yaml" in file:
                          directory = os.path.dirname(file)
                          result = deploy_challenge(directory)
                          if not result:
                              success = False
              else:
                  print("変更されたファイルがないか、全チャレンジを同期します...")
                  # 両方の拡張子を検索
                  yml_files = glob.glob("challenges/**/challenge.yml", recursive=True)
                  yaml_files = glob.glob("challenges/**/challenge.yaml", recursive=True)
                  all_files = yml_files + yaml_files
                  
                  for challenge_file in all_files:
                      directory = os.path.dirname(challenge_file)
                      result = deploy_challenge(directory)
                      if not result:
                          success = False
              
              return 0 if success else 1
          
          if __name__ == '__main__':
              sys.exit(main())
          EOF
          
          # 変更されたファイルまたは全てのチャレンジをデプロイ
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          python deploy_challenges.py "$CHANGED_FILES" || true  # エラーが発生しても続行
        env:
          CTFD_URL: ${{ secrets.CTFD_URL }}
          CTFD_ACCESS_TOKEN: ${{ secrets.CTFD_ACCESS_TOKEN }}